@*@using OrchardCore.Shapes*@
@*@{
        var tabs = (IEnumerable<string>)CoreShapes.HarvestAndSortTabs(Model.Content);
        Display.LocalNavigation(Tabs: tabs);
    }*@

<style asp-src="~/OrchardCore.Contents/Styles/Contents.min.css" debug-src="~/OrchardCore.Contents/Styles/Contents.css"></style>

<div class="container-fluid no-padding">
    <div class="row">
        <div class="col-12 col-md-8 col-lg-10">

            <div class="edit-item-primary">
                @if (Model.Content != null)
                {
                    <div class="edit-item-content">
                        @await DisplayAsync(Model.Content)
                    </div>
                }
            </div>
            <div class="edit-item-parts">
                @if (Model.Parts != null)
                {
                    @await DisplayAsync(Model.Parts)
                }
            </div>
        </div>
        <div class="col-12 col-md-4 col-lg-2">
            <div class="edit-item-secondary group content-sidebar">
                    <div class="edit-item-actions form-group d-md-flex flex-md-column">
                        @*<div class="edit-item-header">*@
                            @if (Model.Header != null)
                            {
                                @await DisplayAsync(Model.Header)
                            }
                        @*</div>*@
                        @await DisplayAsync(Model.Actions)

                        @if (Model.Sidebar != null)
                        {
                            <p>I'm the sidebar bits</p>
                            @*<div class="edit-sidebar-handler"></div>
            <div class="edit-sidebar group">*@
                            @await DisplayAsync(Model.Sidebar)
                            @*</div>*@
                        }
                        @{
                            var returnUrl = Context.Request.Query["returnUrl"];
                        }

                        @if (!String.IsNullOrWhiteSpace(returnUrl) && Url.IsLocalUrl(returnUrl))
                        {
                            <div class="btn-group">
                                <a id="button-cancel" href="@returnUrl" class="btn btn-secondary">@T["Cancel"]</a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
@*@if (Model.Sidebar != null)
{
    <div class="edit-sidebar-handler"></div>
    <div class="edit-sidebar group">
        @await DisplayAsync(Model.Sidebar)
    </div>
}*@
</div>

@if (!String.IsNullOrWhiteSpace(Context.Request.Query["returnUrl"]))
{
    @Html.Hidden("returnUrl", Context.Request.Query["returnUrl"])
}