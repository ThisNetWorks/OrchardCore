@*@using OrchardCore.Shapes*@
@*@{
        var tabs = (IEnumerable<string>)CoreShapes.HarvestAndSortTabs(Model.Content);
        Display.LocalNavigation(Tabs: tabs);
    }*@
@using OrchardCore.ContentManagement
@using OrchardCore.ContentManagement.Metadata
@using OrchardCore.Mvc.Utilities

@inject IContentDefinitionManager ContentDefinitionManager
@{
    ContentItem contentItem = Model.ContentItem;
    var contentTypeDefinition = ContentDefinitionManager.GetTypeDefinition(contentItem.ContentType);
    var typeDisplayName = contentTypeDefinition?.DisplayName ?? contentItem.ContentType.CamelFriendly();
}
<style asp-src="~/OrchardCore.Contents/Styles/Contents.min.css" debug-src="~/OrchardCore.Contents/Styles/Contents.css"></style>
<script asp-src="~/OrchardCore.Resources/Scripts/bootstrap.min.js"  at="Foot"></script>
<div class="container-fluid no-padding">
    <div class="row">
        <div class="col-12 col-md-8 col-lg-10">

            <div class="edit-item-primary">
                @if (Model.Content != null)
                {
                    <div class="edit-item-content">
                        @await DisplayAsync(Model.Content)
                    </div>
                }
            </div>
            <div class="edit-item-parts">
                @if (Model.Parts != null)
                {
                    @await DisplayAsync(Model.Parts)
                }
            </div>
        </div>
        <div class="col-12 col-md-4 col-lg-2">
            <div class="edit-item-secondary group content-sidebar">
                <div class="d-md-flex flex-md-column" style="min-height: 100vh">
                    @*-65 for header*@
                <div class="edit-item-actions form-group d-md-flex flex-md-column">
                    @*<div class="edit-item-header">*@
                    @if (Model.Header != null)
                    {
                        @await DisplayAsync(Model.Header)
                    }
                    @*</div>*@
                    @await DisplayAsync(Model.Actions)

                    @{
                        var returnUrl = Context.Request.Query["returnUrl"];
                    }

                    @if (!String.IsNullOrWhiteSpace(returnUrl) && Url.IsLocalUrl(returnUrl))
                    {
                        <div class="btn-group">
                            <a id="button-cancel" href="@returnUrl" class="btn btn-secondary">@T["Cancel"]</a>
                        </div>
                    }
                </div>

                <div class="edit-item-sidebar form-group ">
                    <div id="accordian">
                        <div class="card">
                            <div class="card-header">
                                <span class="badge badge-success" title="@T["Published"]">
                                    <i class="fa fa-check" aria-hidden="true"></i> @T["Published"]
                                </span>
                            </div>
                        </div>
                        <div class="card">
                            <div class="card-header" >
                                <button class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapseDates">
                                <span class="hint">PublishedUtc</span>
                                </button> 
                                <p>@contentItem.PublishedUtc.GetValueOrDefault()</p>
                            </div>
                            <div id="collapseDates" class="collapse" data-parent="#accordion">
                                <div class="card-body">

                                    <span class="hint">
                                        Created Date
                                    </span>
                                    <p>@contentItem.CreatedUtc.GetValueOrDefault()</p>
                                    <span class="hint">
                                        Modified Date
                                    </span>
                                    <p>@contentItem.ModifiedUtc.GetValueOrDefault()</p>
                                </div>
                            </div>
                        </div>
                        @*<p>Author</p>
                            <p>@contentItem.Author</p>
                            <p>Owner</p>
                            <p>@contentItem.Owner</p>
                            <p>Content Type</p>
                            <p>A thing</p>
                            <p>Id</p>
                            <p>@contentItem.ContentItemId</p>
                            <p>Route</p>
                            <p>/somewhere</p>*@
                        @if (Model.Sidebar != null)
                        {
                            <p>I'm the sidebar bits</p>
                            @*<div class="edit-sidebar-handler"></div>
                                <div class="edit-sidebar group">*@
                            @await DisplayAsync(Model.Sidebar)
                            @*</div>*@
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@*@if (Model.Sidebar != null)
    {
        <div class="edit-sidebar-handler"></div>
        <div class="edit-sidebar group">
            @await DisplayAsync(Model.Sidebar)
        </div>
    }*@
</div>

@if (!String.IsNullOrWhiteSpace(Context.Request.Query["returnUrl"]))
{
    @Html.Hidden("returnUrl", Context.Request.Query["returnUrl"])
}